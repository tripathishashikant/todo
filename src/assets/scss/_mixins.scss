@use "variables" as *;

/* --- headings starts --- */
@mixin h1($fontSize: 2rem, $color: $primary-body-dark) {
  font-family: $fontMerriweather;
  font-size: $fontSize;
  line-height: 1.2;
  font-weight: bold;
  color: $color;

  .light & {
    color: $primary-body-light;
  }
}

@mixin h2($fontSize: 1.6rem, $color: $primary-body-dark) {
  font-family: $fontMerriweather;
  font-size: $fontSize;
  line-height: 1.2;
  font-weight: bold;
  color: $color;

  .light & {
    color: $primary-body-light;
  }
}

@mixin h3($fontSize: 1.4rem, $color: $primary-body-dark) {
  font-family: $fontMerriweather;
  font-size: $fontSize;
  line-height: 1.2;
  font-weight: bold;
  color: $color;

  .light & {
    color: $primary-body-light;
  }
}

@mixin h4($fontSize: 1.2rem, $color: $primary-body-dark) {
  font-family: $fontMerriweather;
  font-size: $fontSize;
  line-height: 1.2;
  font-weight: bold;
  color: $color;

  .light & {
    color: $primary-body-light;
  }
}

@mixin link($color: $primary-link-dark, $decoration: underline) {
  font-size: inherit;
  line-height: inherit;
  color: $color;
  text-decoration: $decoration;

  &:hover,
  &:focus {
    color: $color;

    @if $decoration =='none' {
      text-decoration: 'underline';
    }

    @else {
      text-decoration: none;
    }
  }
}

@mixin btn($fontSize: 1.4rem, $color: $primary-body-dark, $bg: $primary-bg-dark) {
  font-family: $fontLeagueSpartan;
  position: relative;
  padding: 1.2rem 2rem 0.8rem;
  font-size: $fontSize;
  line-height: 1;
  color: $color;
  cursor: pointer;
  border-radius: 2rem;
  border: 0.1rem solid $color;
  background: $bg;
  appearance: none;

  display: flex;
  flex-flow: row nowrap;
  justify-content: center;
  align-items: center;

  .light & {
    color: $primary-body-light;
    border-color: $primary-body-light;
    background-color: $primary-bg-light;
  }

  &:hover,
  &:focus {
    color: $bg;
    border-color: $bg;
    background: $color;

    .light & {
      color: $primary-bg-light;
      border-color: $primary-bg-light;
      background-color: $primary-body-light;
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: 0.6;
    color: $primary-body-dark;
    background: $primary-bg-dark;
    border-color: $primary-body-dark;

    .light & {
      color: $primary-body-light;
      background-color: $primary-bg-light;
      border-color: $primary-body-light;
    }
  }
}

@mixin footnotes($fontSize: 1.2rem, $color: $primary-body-dark) {
  font-family: $fontLeagueSpartan;
  font-size: $fontSize;
  line-height: 1.2;
  color: $color;

  .light & {
    color: $primary-bg-light;
  }
}

@mixin fullScreen() {
  width: 100vw;
  height: 100vh;
}

/**
  When using ::before and ::after you'll always need these three, so we're saving two lines of code every time you use this.
*/
@mixin pseudo($display: block, $pos: absolute, $content: '') {
  content: $content;
  display: $display;
  position: $pos;
}

/*
  We use this for creating scalable elements (usually images / background images) that maintain a ratio.
*/

@mixin responsive-ratio($x, $y, $pseudo: false) {
  $padding: unquote(($y / $x) * 100 + '%');

  @if $pseudo {
    &:before {
      @include pseudo($pos: relative);
      width: 100%;
      padding-top: $padding;
    }
  }

  @else {
    padding-top: $padding;
  }
}

/*
  They're a pain as you have to set the style in all the separate formats, this sorts it for you.
*/
@mixin input-placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

/*
  A massive time saver! You can just use pixel values but we have some default breakpoints setup that work too, another time saver while keeping your breakpoints consistent. 
*/
$breakpoints: (
  'tablet-small': 640px,
  'tablet': 768px,
  'tablet-wide': 1024px,
  'desktop': 1248px,
  'desktop-wide': 1440px,
);

@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);

    @if $type ==max {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }

  @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

/*
  While technically this is just a pure function, but I felt it's worth being on the list as it's so easy to loose track of your z-index values when working in several different files, so we created this so that we could store them in one place for easy editing/recording. Just place this snippet in your main variables/settings.scss file (needs to be imported before any of your other files that reference a x-index of course).
*/
$z-indexes: (
  'outdated-browser',
  'modal',
  'site-header',
  'page-wrapper',
  'site-footer'
);

@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name))+1;
  }

  @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

/*
  Adding Truncation to an element isn't as simple as it should be, although it is with this handy time saver, meaning when you include the mixin, you only have to specify your boundry with a max width value, happy days!
*/
@mixin textShorten($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/*
Hide elements visually, but keep them available for screen-readers.

Used for information required for screen-reader users to understand and use
the site where visual display is undesirable. Information provided in this
manner should be kept concise, to avoid unnecessary burden on the user.
"!important" is used to prevent unintentional overrides.
*/
@mixin a11y-visually-hidden {
  position: absolute !important;
  clip: rect(1px, 1px, 1px, 1px);
  overflow: hidden;
  height: 1px;
  width: 1px;
  word-wrap: normal;
}

/*
Hide visually and from screen-readers, but maintain layout.
*/
@mixin a11y-invisible {
  visibility: hidden;
}
